import java.util.*;
import java.lang.*;
import java.io.*;
// users, teams are part of match 
class Match {
    int numPlayers;
    int numUsers; // keeps track of number of users who have register team
    int numTeams; // number of teams created by users in the match
    int playerScore[] ; // keep trackes of player's score 
    int sortedTeams[]; // teams in sorted order
    int teamRank[]; // maps teamId with team rank
    Map<Integer,String> playerNames=new HashMap<Integer,String>(); // maps player id with their names
    Map<Integer,Integer> userTeam=new HashMap<Integer,Integer>(); // maps user to team id
    Map<int[], Integer> teams=new HashMap<int[],Integer>(); // maps teams to their ids
    Map<Integer, int[]> teamsId=new HashMap<Integer, int[]>(); // maps teamId to their team
    Match(int v, String players){
        numPlayers = v;
        String[] splited = players.split(" ");
        playerScore = new int[2*v]; // each team has v player, so in total there are 2*v players
        // add players to database here and create a match, which would generate a unique match id
        for(int i=0;i<2*v;i++){
            playerNames.put(i,splited[i]); // players are given ids as their names entered in order
            playerScore[i] = 0;
        }
        numUsers = 0;
        numTeams = 0;
        
    }
    public void UpdatePlayerScore(int playerId, int score){
        playerScore[playerId] += score;
        sortTeams();
    }
    public int addTeam(int[] playerIds){
        // first we need to check if that particular team is already created
        // here we are considering that playerIds are in sorted order
        boolean isKeyPresent = teams.containsKey(playerIds);
        if(isKeyPresent){
            userTeam.put(numUsers, teams.get(playerIds));
        }
        else{
            teams.put(playerIds, numTeams);
            teamsId.put(numTeams, playerIds);
            userTeam.put(numUsers,numTeams);
            numTeams++;

        }
        return numUsers++; // increase number of users who create a team, this is user id generated by us

    }
    public int getUserScore(int userId){
        int userTeamId = userTeam.get(userId);
        int score = getTeamScore(userTeamId);
        System.out.printf("User Score: %d" , score);
        return score; 
    }
    public int getUserRank(int userId){
        int userTeamId = userTeam.get(userId);
        int rank = teamRank[userTeamId];
        System.out.printf("User Rank: %d" , rank);
        return rank;    
    }
    public void getLeaderBoard(){
        for(int i=0;i<numUsers;i++){
            System.out.printf("User %d rank is %d" , i,teamRank[userTeam.get(i)]);
        }
    }
    public void startMatch(){
        sortedTeams = new int[numTeams];
        for(int i=0;i<numTeams;i++){
            sortedTeams[i] = i;
            teamRank[i]=0;
        }
    }
    public void sortTeams(){
        for(int i=1;i<numTeams;i++){
            if(getTeamScore(sortedTeams[i-1])<getTeamScore(sortedTeams[i])){
                int j = i-1;
                int curTeamId = sortedTeams[i];
                while(j>=0 && getTeamScore(sortedTeams[j])<getTeamScore(curTeamId)){
                    sortedTeams[j+1] = sortedTeams[j];
                    j--;
                }
                j++;
                sortedTeams[j] = curTeamId;
            }
        }
        teamRank[sortedTeams[0]] = 0;
        for(int i=1;i<numTeams;i++){
            if(getTeamScore(sortedTeams[i])>getTeamScore(sortedTeams[i-1])){
                teamRank[sortedTeams[i]] = teamRank[sortedTeams[i-1]]+1;
            }
            else{
                teamRank[sortedTeams[i]] = teamRank[sortedTeams[i-1]];
            }
        }

    }
    public int getTeamScore(int teamId){
        int score=0;
        int[] players = teamsId.get(teamId);
        for(int i=0;i<2*numPlayers;i++){
            score+=playerScore[players[i]];
        }
        return score;
    }
    public void showPlayers(){
        for(int i=0;i<2*numPlayers;i++){
            System.out.printf("%s %d", playerNames.get(i),i);
        }
    }
    
}